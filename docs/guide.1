.\" generated with Ronn/v0.6.6
.\" http://github.com/rtomayko/ronn/
.
.TH "GUIDE" "" "July 2010" "" ""
.
.SS "Creating An Application"
The \fIexpress\.Server\fR now inherits from \fIhttp\.Server\fR, however follows the same idiom by providing \fIexpress\.createServer()\fR as shown below\. This means that you can utilize Express server\'s transparently with other libraries\.
.
.IP "" 4
.
.nf

var app = require(\'express\')\.createServer();

app\.get(\'/\', function(req, res){
    res\.send(\'hello world\');
});

app\.listen(3000);
.
.fi
.
.IP "" 0
.
.SS "Configuration"
Express supports arbitrary environments, such as \fIproduction\fR and \fIdevelopment\fR\. Developers can use the \fIconfigure()\fR method to setup needs required by the current environment\. When \fIconfigure()\fR is called without an environment name it will be run in \fIevery\fR environment prior to the environment specific callback\.
.
.P
In the example below we only \fIdumpExceptions\fR, and respond with exception stack traces in \fIdevelopment\fR mode, however for both environments we utilize \fImethodOverride\fR and \fIbodyDecoder\fR\.
.
.IP "" 4
.
.nf

app\.configure(function(){
    app\.use(\'/\', connect\.methodOverride());
    app\.use(\'/\', connect\.bodyDecoder());
});

app\.configure(\'development\', function(){
    app\.use(\'/\', connect\.errorHandler({ dumpExceptions: true, showStack: true }));
});

app\.configure(\'production\', function(){
    app\.use(\'/\', connect\.errorHandler());
});
.
.fi
.
.IP "" 0
.
.P
For internal and arbitrary settings Express provides the \fIset(key[, val])\fR, \fIenable(key)\fR, \fIdisable(key)\fR methods:
.
.IP "" 4
.
.nf

app\.configure(function(){
    app\.set(\'views\', __dirname + \'/views\');
    app\.set(\'views\');
    // => \"\.\.\. views directory \.\.\.\"

    app\.enable(\'some feature\');
    // same as app\.set(\'some feature\', true);

    app\.disable(\'some feature\');
    // same as app\.set(\'some feature\', false);
});
.
.fi
.
.IP "" 0
.
.SS "Settings"
Express supports the following settings out of the box:
.
.IP "\(bu" 4
\fIhome\fR Application base path used with \fBres\.redirect()\fR
.
.IP "\(bu" 4
\fIviews\fR Root views directory defaulting to \fBCWD/views\fR
.
.IP "\(bu" 4
\fIview engine\fR Default view engine name for views rendered without extensions
.
.IP "\(bu" 4
\fIreload views\fR Reloads altered views, by default watches for \fImtime\fR changes with with a 5 minute interval\. Example: \fBapp\.set(\'reload views\', { interval: 60000 });\fR
.
.IP "" 0
.
.SS "Routing"
Express utilizes the HTTP verbs to provide a meaningful, expressive routing API\. For example we may want to render a user\'s account for the path \fI/user/12\fR, this can be done by defining the route below\. The values associated to the named placeholders, are passed as the \fIthird\fR argument, which here we name \fIparams\fR\.
.
.IP "" 4
.
.nf

app\.get(\'/user/:id\', function(req, res, params){
    res\.send(\'user \' + params\.id);
});
.
.fi
.
.IP "" 0
.
.P
A route is simple a string which is compiled to a \fIRegExp\fR internally\. For example when \fI/user/:id\fR is compiled, a simplified version of the regexp may look similar to:
.
.IP "" 4
.
.nf

\\/user\\/([^\\/]+)\\/?
.
.fi
.
.IP "" 0
.
.P
Literal regular expressions may also be passed for complex uses:
.
.IP "" 4
.
.nf

app\.get(/^\\/foo(bar)?$/, function(){});
.
.fi
.
.IP "" 0
.
.P
Below are some route examples, and the associated paths that they may consume:
.
.IP "" 4
.
.nf

 \"/user/:id\"
 /user/12

 \"/users/:id?\"
 /users/5
 /users

 \"/files/*\"
 /files/jquery\.js
 /files/javascripts/jquery\.js

 \"/file/*\.*\"
 /files/jquery\.js
 /files/javascripts/jquery\.js

 \"/user/:id/:operation?\"
 /user/1
 /user/1/edit

 \"/products\.:format\"
 /products\.json
 /products\.xml

 \"/products\.:format?\"
 /products\.json
 /products\.xml
 /products
.
.fi
.
.IP "" 0
.
.SS "Passing Route Control"
We may pass control to the next \fImatching\fR route, by calling the \fIfourth\fR parameter, the \fInext()\fR function\. When a match cannot be made, control is passed back to Connect\.
.
.IP "" 4
.
.nf

app\.get(\'/users/:id?\', function(req, res, params){
    if (params\.id) {
        // do something
    } else {
        next();
    }
});

app\.get(\'/users\', function(req, res, params){
    // do something else
});
.
.fi
.
.IP "" 0
.
.SS "Middleware"
The Express \fIPlugin\fR is no more! middleware via Connect \fIhttp://github\.com/extjs/Connect\fR can be passed to \fIexpress\.createServer()\fR as you would with a regular Connect server\. For example:
.
.IP "" 4
.
.nf

var connect = require(\'connect\'),
    express = require(\'express\');

var app = express\.createServer(
    connect\.logger(),
    connect\.bodyDecoder()
);
.
.fi
.
.IP "" 0
.
.SS "ServerResponse#header(key[, val])"
Get or set the response header \fIkey\fR\.
.
.IP "" 4
.
.nf

res\.header(\'Content\-Length\');
// => undefined

res\.header(\'Content\-Length\', 123);
// => 123

res\.header(\'Content\-Length\');
// => 123
.
.fi
.
.IP "" 0
.
.SS "ServerResponse#contentType(type)"
Sets the \fIContent\-Type\fR response header to the given \fItype\fR\.
.
.IP "" 4
.
.nf

  var filename = \'path/to/image\.png\';
  res\.contentType(filename);
  // res\.headers[\'Content\-Type\'] is now \"image/png\"
.
.fi
.
.IP "" 0
.
.SS "ServerResponse#attachment([filename])"
Sets the \fIContent\-Disposition\fR response header to \"attachment\", with optional \fIfilename\fR\.
.
.IP "" 4
.
.nf

  res\.attachment(\'path/to/my/image\.png\');
.
.fi
.
.IP "" 0
.
.SS "ServerResponse#sendfile(path)"
Used by \fBres\.download()\fR to transfer an arbitrary file\.
.
.IP "" 4
.
.nf

res\.sendfile(\'path/to/my\.file\');
.
.fi
.
.IP "" 0
.
.P
\fBNOTE\fR: this is \fInot\fR a replacement for Connect\'s \fIstaticProvider\fR middleware, nor does it perform any security checks, use with caution when using in a dynamic manor\.
.
.SS "ServerResponse#download(file[, filename])"
Transfer the given \fIfile\fR as an attachment with optional alternative \fIfilename\fR\.
.
.IP "" 4
.
.nf

res\.download(\'path/to/image\.png\');
res\.download(\'path/to/image\.png\', \'foo\.png\');
.
.fi
.
.IP "" 0
.
.P
This is equivalent to:
.
.IP "" 4
.
.nf

res\.attachment(file);
res\.sendfile(file);
.
.fi
.
.IP "" 0
.
.SS "ServerRequest#send(body|status[, headers|status[, status]])"
The \fBres\.send()\fR method is a high level response utility allowing you to pass objects to respond with json, strings for html, arbitrary _Buffer_s or numbers for status code based responses\. The following are all valid uses:
.
.IP "" 4
.
.nf

 res\.send(new Buffer(\'wahoo\'));
 res\.send({ some: \'json\' });
 res\.send(\'<p>some html</p>\');
 res\.send(\'Sorry, cant find that\', 404);
 res\.send(\'text\', { \'Content\-Type\': \'text/plain\' }, 201);
 res\.send(404);
.
.fi
.
.IP "" 0
.
.P
By default the \fIContent\-Type\fR response header is set, however if explicitly assigned through \fBres\.send()\fR or previously with \fBres\.header()\fR or \fBres\.contentType()\fR it will not be set again\.
.
.SS "ServerResponse#redirect(url[, status])"
Redirect to the given \fIurl\fR with a default response \fIstatus\fR of 302\.
.
.IP "" 4
.
.nf

res\.redirect(\'/\', 301);
res\.redirect(\'/account\');
res\.redirect(\'http://google\.com\');
res\.redirect(\'home\');
res\.redirect(\'back\');
.
.fi
.
.IP "" 0
.
.P
Express supports \"redirect mapping\", which by default provides \fIhome\fR, and \fIback\fR\. The \fIback\fR map checks the \fIReferrer\fR and \fIReferer\fR headers, while \fIhome\fR utilizes the \"home\" setting and defaults to \"/\"\.
.
.SS "Server#redirect(name, val)"
For use with \fBres\.redirect()\fR we can map redirects at the application level as shown below:
.
.IP "" 4
.
.nf

app\.redirect(\'google\', \'http://google\.com\');
.
.fi
.
.IP "" 0
.
.P
Now in a route we may call:
.
.P
res\.redirect(\'google\');
.
.P
We may also map dynamic redirects:
.
.IP "" 4
.
.nf

app\.redirect(\'comments\', function(req, res, params){
    return \'/post/\' + params\.id + \'/comments\';
});
.
.fi
.
.IP "" 0
.
.P
So now we may do the following, and the redirect will dynamically adjust to the context of the request\. If we called this route with \fIGET /post/12\fR our redirect \fILocation\fR would be \fI/post/12/comments\fR\.
.
.IP "" 4
.
.nf

app\.get(\'/post/:id\', function(req, res){
    res\.redirect(\'comments\');
});
.
.fi
.
.IP "" 0

