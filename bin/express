#!/usr/bin/env node

/**
 * Module dependencies.
 */

var sys = require('sys'),
    fs = require('fs'),
    childProcess = require('child_process');

/**
 * Framework version.
 */

var version = '1.0.0';

/**
 * Usage documentation.
 */

var usage = ''
    + '\x1b[1mUsage\x1b[0m: express [options] [PATH]\n'
    + '\n'
    + '\x1b[1mOptions\x1b[0m:\n'
    + '  -v, --version Output framework version\n'
    + '  -h, --help    Output help information\n'

// Parse arguments

var args = process.argv.slice(2),
    path = '.';
while (args.length) {
    var arg = args.shift();
    switch (arg) {
        case '-h':
        case '--help':
            abort(usage);
            break;
        case '-v':
        case '--version':
            abort(version);
            break;
        default:
            path = arg;
    }
}

// Generate application

(function createApplication(path) {
    mkdir(path, function(){
        write(path + '/app.js', 'app contents');
        mkdir(path + '/config');
        mkdir(path + '/views/partials');
    });
})(path);

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
    fs.writeFile(path, str);
    sys.puts('   create : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    childProcess.exec('mkdir -p ' + path, function(err){
        if (err) throw err;
        sys.puts('   create : ' + path);
        fn && fn();
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
    sys.error(str);
    process.exit(1);
}