#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('../')
  , exec = require('child_process').exec
  , program = require('commander')
  , mkdirp = require('mkdirp')
  , fs = require('fs');

// CLI

program
  .version(express.version)
  .option('-s, --sessions', 'add session support')
  .option('-e, --ejs', 'add ejs support (defaults to jade)')
  .option('-S, --stylus', 'add stylus support')
  .parse(process.argv);

// Path

var path = program.args.shift() || '.';

// Template engine

program.template = 'jade';
if (program.ejs) program.template = 'ejs';

// Stylesheet engine

program.css = program.stylus
  ? 'stylus'
  : null;

/**
 * Jade layout template.
 */

var jadeLayout = [
    '!!!'
  , 'html'
  , '  head'
  , '    title= title'
  , '    link(rel=\'stylesheet\', href=\'/stylesheets/style.css\')'
  , '  body!= body'
].join('\n');

/**
 * Jade index template.
 */

var jadeIndex = [
    'h1= title'
  , 'p Welcome to #{title}'
].join('\n');

/**
 * EJS layout template.
 */

var ejsLayout = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title><%= title %></title>'
  , '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    <%- body %>'
  , '  </body>'
  , '</html>'
].join('\n');

/**
 * EJS index template.
 */

var ejsIndex = [
    '<h1><%= title %></h1>'
  , '<p>Welcome to <%= title %></p>'
  ].join('\n');

/**
 * Default css template.
 */

var css = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'a {'
  , '  color: #00B7FF;'
  , '}'
].join('\n');

/**
 * Default less template.
 */

var less = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'a {'
  , '  color: #00B7FF;'
  , '}'
].join('\n');

/**
 * Default sass template.
 */

var sass = [
    'body'
  , '  :padding 50px'
  , '  :font 14px "Lucida Grande", Helvetica, Arial, sans-serif'
  , 'a'
  , '  :color #00B7FF'
].join('\n');

/**
 * Default stylus template.
 */

var stylus = [
    'body'
  , '  padding: 50px'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif'
  , 'a'
  , '  color: #00B7FF'
].join('\n');

/**
 * App template.
 */

var app = [
    ''
  , '/**'
  , ' * Module dependencies.'
  , ' */'
  , ''
  , 'var express = require(\'express\');'
  , ''
  , 'var app = module.exports = express.createServer();'
  , ''
  , '// Configuration'
  , ''
  , 'app.configure(function(){'
  , '  app.set(\'views\', __dirname + \'/views\');'
  , '  app.set(\'view engine\', \':TEMPLATE\');'
  , '  app.use(express.logger(\'dev\'));'
  , '  app.use(express.bodyParser());'
  , '  app.use(express.methodOverride());{sess}{css}'
  , '  app.use(app.router);'
  , '  app.use(express.static(__dirname + \'/public\'));'
  , '});'
  , ''
  , 'app.configure(\'development\', function(){'
  , '  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); '
  , '});'
  , ''
  , 'app.configure(\'production\', function(){'
  , '  app.use(express.errorHandler()); '
  , '});'
  , ''
  , '// Routes'
  , ''
  , 'app.get(\'/\', function(req, res){'
  , '  res.render(\'index\', {'
  , '    title: \'Express\''
  , '  });'
  , '});'
  , ''
  , 'app.listen(3000);'
  , 'console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);'
  , ''
].join('\n');

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  mkdir(path, function(){
    mkdir(path + '/public/javascripts');
    mkdir(path + '/public/images');
    mkdir(path + '/public/stylesheets', function(){
      switch (program.css) {
        case 'stylus':
          write(path + '/public/stylesheets/style.styl', stylus);
          break;
        case 'less':
          write(path + '/public/stylesheets/style.less', less);
          break;
        case 'sass':
          write(path + '/public/stylesheets/style.sass', sass);
          break;
        default:
          write(path + '/public/stylesheets/style.css', css);
      }
    });

    mkdir(path + '/views', function(){
      switch (program.template) {
        case 'ejs':
          write(path + '/views/layout.ejs', ejsLayout);
          write(path + '/views/index.ejs', ejsIndex);
          break;
        case 'jade':
          write(path + '/views/layout.jade', jadeLayout);
          write(path + '/views/index.jade', jadeIndex);
          break;
      }
    });

    // CSS Engine support
    switch (program.css) {
      case 'sass':
      case 'less':
        app = app.replace('{css}', '\n  app.use(express.compiler({ src: __dirname + \'/public\', enable: [\'' + cssEngine + '\'] }));');
        break;
      case 'stylus':
        app = app.replace('{css}', '\n  app.use(require(\'stylus\').middleware({ src: __dirname + \'/public\' }));');
        break;
      default:
        app = app.replace('{css}', '');
    }

    // Session support
    app = app.replace('{sess}', program.sessions
      ? '\n  app.use(express.cookieParser());\n  app.use(express.session({ secret: \'your secret here\' }));'
      : '');

    // Template support
    app = app.replace(':TEMPLATE', program.template);

    // package.json
    var json = '{\n';
    json += '    "name": "application-name"\n';
    json += '  , "version": "0.0.1"\n';
    json += '  , "private": true\n';
    json += '  , "dependencies": {\n';
    json += '      "express": "' + express.version + '"\n';
    if (program.css) json += '    , "' + program.css + '": ">= 0.0.1"\n';
    if (program.template) json += '    , "' + program.template + '": ">= 0.0.1"\n';
    json += '  }\n';
    json += '}';


    write(path + '/package.json', json);
    write(path + '/app.js', app);
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
